/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.temantani.kafka.investment.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InvestmentPaidAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8404927774384915819L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InvestmentPaidAvroModel\",\"namespace\":\"com.temantani.kafka.investment.avro.model\",\"fields\":[{\"name\":\"investmentId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"projectId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"investorId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<InvestmentPaidAvroModel> ENCODER =
      new BinaryMessageEncoder<InvestmentPaidAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InvestmentPaidAvroModel> DECODER =
      new BinaryMessageDecoder<InvestmentPaidAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InvestmentPaidAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InvestmentPaidAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InvestmentPaidAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InvestmentPaidAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InvestmentPaidAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InvestmentPaidAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InvestmentPaidAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InvestmentPaidAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String investmentId;
  private java.lang.String projectId;
  private java.lang.String investorId;
  private java.math.BigDecimal amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InvestmentPaidAvroModel() {}

  /**
   * All-args constructor.
   * @param investmentId The new value for investmentId
   * @param projectId The new value for projectId
   * @param investorId The new value for investorId
   * @param amount The new value for amount
   */
  public InvestmentPaidAvroModel(java.lang.String investmentId, java.lang.String projectId, java.lang.String investorId, java.math.BigDecimal amount) {
    this.investmentId = investmentId;
    this.projectId = projectId;
    this.investorId = investorId;
    this.amount = amount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return investmentId;
    case 1: return projectId;
    case 2: return investorId;
    case 3: return amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: investmentId = value$ != null ? value$.toString() : null; break;
    case 1: projectId = value$ != null ? value$.toString() : null; break;
    case 2: investorId = value$ != null ? value$.toString() : null; break;
    case 3: amount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'investmentId' field.
   * @return The value of the 'investmentId' field.
   */
  public java.lang.String getInvestmentId() {
    return investmentId;
  }


  /**
   * Sets the value of the 'investmentId' field.
   * @param value the value to set.
   */
  public void setInvestmentId(java.lang.String value) {
    this.investmentId = value;
  }

  /**
   * Gets the value of the 'projectId' field.
   * @return The value of the 'projectId' field.
   */
  public java.lang.String getProjectId() {
    return projectId;
  }


  /**
   * Sets the value of the 'projectId' field.
   * @param value the value to set.
   */
  public void setProjectId(java.lang.String value) {
    this.projectId = value;
  }

  /**
   * Gets the value of the 'investorId' field.
   * @return The value of the 'investorId' field.
   */
  public java.lang.String getInvestorId() {
    return investorId;
  }


  /**
   * Sets the value of the 'investorId' field.
   * @param value the value to set.
   */
  public void setInvestorId(java.lang.String value) {
    this.investorId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Creates a new InvestmentPaidAvroModel RecordBuilder.
   * @return A new InvestmentPaidAvroModel RecordBuilder
   */
  public static com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder newBuilder() {
    return new com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder();
  }

  /**
   * Creates a new InvestmentPaidAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InvestmentPaidAvroModel RecordBuilder
   */
  public static com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder newBuilder(com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder other) {
    if (other == null) {
      return new com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder();
    } else {
      return new com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new InvestmentPaidAvroModel RecordBuilder by copying an existing InvestmentPaidAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new InvestmentPaidAvroModel RecordBuilder
   */
  public static com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder newBuilder(com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel other) {
    if (other == null) {
      return new com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder();
    } else {
      return new com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for InvestmentPaidAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InvestmentPaidAvroModel>
    implements org.apache.avro.data.RecordBuilder<InvestmentPaidAvroModel> {

    private java.lang.String investmentId;
    private java.lang.String projectId;
    private java.lang.String investorId;
    private java.math.BigDecimal amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.investmentId)) {
        this.investmentId = data().deepCopy(fields()[0].schema(), other.investmentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.projectId)) {
        this.projectId = data().deepCopy(fields()[1].schema(), other.projectId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.investorId)) {
        this.investorId = data().deepCopy(fields()[2].schema(), other.investorId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing InvestmentPaidAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.investmentId)) {
        this.investmentId = data().deepCopy(fields()[0].schema(), other.investmentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.projectId)) {
        this.projectId = data().deepCopy(fields()[1].schema(), other.projectId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.investorId)) {
        this.investorId = data().deepCopy(fields()[2].schema(), other.investorId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'investmentId' field.
      * @return The value.
      */
    public java.lang.String getInvestmentId() {
      return investmentId;
    }


    /**
      * Sets the value of the 'investmentId' field.
      * @param value The value of 'investmentId'.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder setInvestmentId(java.lang.String value) {
      validate(fields()[0], value);
      this.investmentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'investmentId' field has been set.
      * @return True if the 'investmentId' field has been set, false otherwise.
      */
    public boolean hasInvestmentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'investmentId' field.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder clearInvestmentId() {
      investmentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectId' field.
      * @return The value.
      */
    public java.lang.String getProjectId() {
      return projectId;
    }


    /**
      * Sets the value of the 'projectId' field.
      * @param value The value of 'projectId'.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder setProjectId(java.lang.String value) {
      validate(fields()[1], value);
      this.projectId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'projectId' field has been set.
      * @return True if the 'projectId' field has been set, false otherwise.
      */
    public boolean hasProjectId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'projectId' field.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder clearProjectId() {
      projectId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'investorId' field.
      * @return The value.
      */
    public java.lang.String getInvestorId() {
      return investorId;
    }


    /**
      * Sets the value of the 'investorId' field.
      * @param value The value of 'investorId'.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder setInvestorId(java.lang.String value) {
      validate(fields()[2], value);
      this.investorId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'investorId' field has been set.
      * @return True if the 'investorId' field has been set, false otherwise.
      */
    public boolean hasInvestorId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'investorId' field.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder clearInvestorId() {
      investorId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.temantani.kafka.investment.avro.model.InvestmentPaidAvroModel.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InvestmentPaidAvroModel build() {
      try {
        InvestmentPaidAvroModel record = new InvestmentPaidAvroModel();
        record.investmentId = fieldSetFlags()[0] ? this.investmentId : (java.lang.String) defaultValue(fields()[0]);
        record.projectId = fieldSetFlags()[1] ? this.projectId : (java.lang.String) defaultValue(fields()[1]);
        record.investorId = fieldSetFlags()[2] ? this.investorId : (java.lang.String) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InvestmentPaidAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<InvestmentPaidAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InvestmentPaidAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<InvestmentPaidAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










