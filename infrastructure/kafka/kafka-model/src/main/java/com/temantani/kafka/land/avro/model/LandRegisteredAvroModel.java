/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.temantani.kafka.land.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LandRegisteredAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4688182044532642062L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LandRegisteredAvroModel\",\"namespace\":\"com.temantani.kafka.land.avro.model\",\"fields\":[{\"name\":\"landId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"ownerId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"approverId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"approvedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"proposedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"harvestSuitabilities\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groundHeightValue\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"groundHeightUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"soilPh\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"waterAvailabilityStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"landUsageHistory\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"landStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"areaValue\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"areaUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"certificateUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"photos\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LandRegisteredAvroModel> ENCODER =
      new BinaryMessageEncoder<LandRegisteredAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LandRegisteredAvroModel> DECODER =
      new BinaryMessageDecoder<LandRegisteredAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LandRegisteredAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LandRegisteredAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LandRegisteredAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LandRegisteredAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LandRegisteredAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LandRegisteredAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LandRegisteredAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LandRegisteredAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String landId;
  private java.lang.String ownerId;
  private java.lang.String approverId;
  private java.time.Instant approvedAt;
  private java.time.Instant proposedAt;
  private java.lang.String harvestSuitabilities;
  private java.math.BigDecimal groundHeightValue;
  private java.lang.String groundHeightUnit;
  private java.math.BigDecimal soilPh;
  private java.lang.String waterAvailabilityStatus;
  private java.lang.String landUsageHistory;
  private java.lang.String landStatus;
  private java.math.BigDecimal areaValue;
  private java.lang.String areaUnit;
  private java.lang.String street;
  private java.lang.String city;
  private java.lang.String postalCode;
  private java.lang.String certificateUrl;
  private java.lang.String photos;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LandRegisteredAvroModel() {}

  /**
   * All-args constructor.
   * @param landId The new value for landId
   * @param ownerId The new value for ownerId
   * @param approverId The new value for approverId
   * @param approvedAt The new value for approvedAt
   * @param proposedAt The new value for proposedAt
   * @param harvestSuitabilities The new value for harvestSuitabilities
   * @param groundHeightValue The new value for groundHeightValue
   * @param groundHeightUnit The new value for groundHeightUnit
   * @param soilPh The new value for soilPh
   * @param waterAvailabilityStatus The new value for waterAvailabilityStatus
   * @param landUsageHistory The new value for landUsageHistory
   * @param landStatus The new value for landStatus
   * @param areaValue The new value for areaValue
   * @param areaUnit The new value for areaUnit
   * @param street The new value for street
   * @param city The new value for city
   * @param postalCode The new value for postalCode
   * @param certificateUrl The new value for certificateUrl
   * @param photos The new value for photos
   */
  public LandRegisteredAvroModel(java.lang.String landId, java.lang.String ownerId, java.lang.String approverId, java.time.Instant approvedAt, java.time.Instant proposedAt, java.lang.String harvestSuitabilities, java.math.BigDecimal groundHeightValue, java.lang.String groundHeightUnit, java.math.BigDecimal soilPh, java.lang.String waterAvailabilityStatus, java.lang.String landUsageHistory, java.lang.String landStatus, java.math.BigDecimal areaValue, java.lang.String areaUnit, java.lang.String street, java.lang.String city, java.lang.String postalCode, java.lang.String certificateUrl, java.lang.String photos) {
    this.landId = landId;
    this.ownerId = ownerId;
    this.approverId = approverId;
    this.approvedAt = approvedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.proposedAt = proposedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.harvestSuitabilities = harvestSuitabilities;
    this.groundHeightValue = groundHeightValue;
    this.groundHeightUnit = groundHeightUnit;
    this.soilPh = soilPh;
    this.waterAvailabilityStatus = waterAvailabilityStatus;
    this.landUsageHistory = landUsageHistory;
    this.landStatus = landStatus;
    this.areaValue = areaValue;
    this.areaUnit = areaUnit;
    this.street = street;
    this.city = city;
    this.postalCode = postalCode;
    this.certificateUrl = certificateUrl;
    this.photos = photos;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return landId;
    case 1: return ownerId;
    case 2: return approverId;
    case 3: return approvedAt;
    case 4: return proposedAt;
    case 5: return harvestSuitabilities;
    case 6: return groundHeightValue;
    case 7: return groundHeightUnit;
    case 8: return soilPh;
    case 9: return waterAvailabilityStatus;
    case 10: return landUsageHistory;
    case 11: return landStatus;
    case 12: return areaValue;
    case 13: return areaUnit;
    case 14: return street;
    case 15: return city;
    case 16: return postalCode;
    case 17: return certificateUrl;
    case 18: return photos;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: landId = value$ != null ? value$.toString() : null; break;
    case 1: ownerId = value$ != null ? value$.toString() : null; break;
    case 2: approverId = value$ != null ? value$.toString() : null; break;
    case 3: approvedAt = (java.time.Instant)value$; break;
    case 4: proposedAt = (java.time.Instant)value$; break;
    case 5: harvestSuitabilities = value$ != null ? value$.toString() : null; break;
    case 6: groundHeightValue = (java.math.BigDecimal)value$; break;
    case 7: groundHeightUnit = value$ != null ? value$.toString() : null; break;
    case 8: soilPh = (java.math.BigDecimal)value$; break;
    case 9: waterAvailabilityStatus = value$ != null ? value$.toString() : null; break;
    case 10: landUsageHistory = value$ != null ? value$.toString() : null; break;
    case 11: landStatus = value$ != null ? value$.toString() : null; break;
    case 12: areaValue = (java.math.BigDecimal)value$; break;
    case 13: areaUnit = value$ != null ? value$.toString() : null; break;
    case 14: street = value$ != null ? value$.toString() : null; break;
    case 15: city = value$ != null ? value$.toString() : null; break;
    case 16: postalCode = value$ != null ? value$.toString() : null; break;
    case 17: certificateUrl = value$ != null ? value$.toString() : null; break;
    case 18: photos = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'landId' field.
   * @return The value of the 'landId' field.
   */
  public java.lang.String getLandId() {
    return landId;
  }


  /**
   * Sets the value of the 'landId' field.
   * @param value the value to set.
   */
  public void setLandId(java.lang.String value) {
    this.landId = value;
  }

  /**
   * Gets the value of the 'ownerId' field.
   * @return The value of the 'ownerId' field.
   */
  public java.lang.String getOwnerId() {
    return ownerId;
  }


  /**
   * Sets the value of the 'ownerId' field.
   * @param value the value to set.
   */
  public void setOwnerId(java.lang.String value) {
    this.ownerId = value;
  }

  /**
   * Gets the value of the 'approverId' field.
   * @return The value of the 'approverId' field.
   */
  public java.lang.String getApproverId() {
    return approverId;
  }


  /**
   * Sets the value of the 'approverId' field.
   * @param value the value to set.
   */
  public void setApproverId(java.lang.String value) {
    this.approverId = value;
  }

  /**
   * Gets the value of the 'approvedAt' field.
   * @return The value of the 'approvedAt' field.
   */
  public java.time.Instant getApprovedAt() {
    return approvedAt;
  }


  /**
   * Sets the value of the 'approvedAt' field.
   * @param value the value to set.
   */
  public void setApprovedAt(java.time.Instant value) {
    this.approvedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'proposedAt' field.
   * @return The value of the 'proposedAt' field.
   */
  public java.time.Instant getProposedAt() {
    return proposedAt;
  }


  /**
   * Sets the value of the 'proposedAt' field.
   * @param value the value to set.
   */
  public void setProposedAt(java.time.Instant value) {
    this.proposedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'harvestSuitabilities' field.
   * @return The value of the 'harvestSuitabilities' field.
   */
  public java.lang.String getHarvestSuitabilities() {
    return harvestSuitabilities;
  }


  /**
   * Sets the value of the 'harvestSuitabilities' field.
   * @param value the value to set.
   */
  public void setHarvestSuitabilities(java.lang.String value) {
    this.harvestSuitabilities = value;
  }

  /**
   * Gets the value of the 'groundHeightValue' field.
   * @return The value of the 'groundHeightValue' field.
   */
  public java.math.BigDecimal getGroundHeightValue() {
    return groundHeightValue;
  }


  /**
   * Sets the value of the 'groundHeightValue' field.
   * @param value the value to set.
   */
  public void setGroundHeightValue(java.math.BigDecimal value) {
    this.groundHeightValue = value;
  }

  /**
   * Gets the value of the 'groundHeightUnit' field.
   * @return The value of the 'groundHeightUnit' field.
   */
  public java.lang.String getGroundHeightUnit() {
    return groundHeightUnit;
  }


  /**
   * Sets the value of the 'groundHeightUnit' field.
   * @param value the value to set.
   */
  public void setGroundHeightUnit(java.lang.String value) {
    this.groundHeightUnit = value;
  }

  /**
   * Gets the value of the 'soilPh' field.
   * @return The value of the 'soilPh' field.
   */
  public java.math.BigDecimal getSoilPh() {
    return soilPh;
  }


  /**
   * Sets the value of the 'soilPh' field.
   * @param value the value to set.
   */
  public void setSoilPh(java.math.BigDecimal value) {
    this.soilPh = value;
  }

  /**
   * Gets the value of the 'waterAvailabilityStatus' field.
   * @return The value of the 'waterAvailabilityStatus' field.
   */
  public java.lang.String getWaterAvailabilityStatus() {
    return waterAvailabilityStatus;
  }


  /**
   * Sets the value of the 'waterAvailabilityStatus' field.
   * @param value the value to set.
   */
  public void setWaterAvailabilityStatus(java.lang.String value) {
    this.waterAvailabilityStatus = value;
  }

  /**
   * Gets the value of the 'landUsageHistory' field.
   * @return The value of the 'landUsageHistory' field.
   */
  public java.lang.String getLandUsageHistory() {
    return landUsageHistory;
  }


  /**
   * Sets the value of the 'landUsageHistory' field.
   * @param value the value to set.
   */
  public void setLandUsageHistory(java.lang.String value) {
    this.landUsageHistory = value;
  }

  /**
   * Gets the value of the 'landStatus' field.
   * @return The value of the 'landStatus' field.
   */
  public java.lang.String getLandStatus() {
    return landStatus;
  }


  /**
   * Sets the value of the 'landStatus' field.
   * @param value the value to set.
   */
  public void setLandStatus(java.lang.String value) {
    this.landStatus = value;
  }

  /**
   * Gets the value of the 'areaValue' field.
   * @return The value of the 'areaValue' field.
   */
  public java.math.BigDecimal getAreaValue() {
    return areaValue;
  }


  /**
   * Sets the value of the 'areaValue' field.
   * @param value the value to set.
   */
  public void setAreaValue(java.math.BigDecimal value) {
    this.areaValue = value;
  }

  /**
   * Gets the value of the 'areaUnit' field.
   * @return The value of the 'areaUnit' field.
   */
  public java.lang.String getAreaUnit() {
    return areaUnit;
  }


  /**
   * Sets the value of the 'areaUnit' field.
   * @param value the value to set.
   */
  public void setAreaUnit(java.lang.String value) {
    this.areaUnit = value;
  }

  /**
   * Gets the value of the 'street' field.
   * @return The value of the 'street' field.
   */
  public java.lang.String getStreet() {
    return street;
  }


  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.String value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'postalCode' field.
   * @return The value of the 'postalCode' field.
   */
  public java.lang.String getPostalCode() {
    return postalCode;
  }


  /**
   * Sets the value of the 'postalCode' field.
   * @param value the value to set.
   */
  public void setPostalCode(java.lang.String value) {
    this.postalCode = value;
  }

  /**
   * Gets the value of the 'certificateUrl' field.
   * @return The value of the 'certificateUrl' field.
   */
  public java.lang.String getCertificateUrl() {
    return certificateUrl;
  }


  /**
   * Sets the value of the 'certificateUrl' field.
   * @param value the value to set.
   */
  public void setCertificateUrl(java.lang.String value) {
    this.certificateUrl = value;
  }

  /**
   * Gets the value of the 'photos' field.
   * @return The value of the 'photos' field.
   */
  public java.lang.String getPhotos() {
    return photos;
  }


  /**
   * Sets the value of the 'photos' field.
   * @param value the value to set.
   */
  public void setPhotos(java.lang.String value) {
    this.photos = value;
  }

  /**
   * Creates a new LandRegisteredAvroModel RecordBuilder.
   * @return A new LandRegisteredAvroModel RecordBuilder
   */
  public static com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder newBuilder() {
    return new com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder();
  }

  /**
   * Creates a new LandRegisteredAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LandRegisteredAvroModel RecordBuilder
   */
  public static com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder newBuilder(com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder other) {
    if (other == null) {
      return new com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder();
    } else {
      return new com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new LandRegisteredAvroModel RecordBuilder by copying an existing LandRegisteredAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new LandRegisteredAvroModel RecordBuilder
   */
  public static com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder newBuilder(com.temantani.kafka.land.avro.model.LandRegisteredAvroModel other) {
    if (other == null) {
      return new com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder();
    } else {
      return new com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for LandRegisteredAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LandRegisteredAvroModel>
    implements org.apache.avro.data.RecordBuilder<LandRegisteredAvroModel> {

    private java.lang.String landId;
    private java.lang.String ownerId;
    private java.lang.String approverId;
    private java.time.Instant approvedAt;
    private java.time.Instant proposedAt;
    private java.lang.String harvestSuitabilities;
    private java.math.BigDecimal groundHeightValue;
    private java.lang.String groundHeightUnit;
    private java.math.BigDecimal soilPh;
    private java.lang.String waterAvailabilityStatus;
    private java.lang.String landUsageHistory;
    private java.lang.String landStatus;
    private java.math.BigDecimal areaValue;
    private java.lang.String areaUnit;
    private java.lang.String street;
    private java.lang.String city;
    private java.lang.String postalCode;
    private java.lang.String certificateUrl;
    private java.lang.String photos;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.landId)) {
        this.landId = data().deepCopy(fields()[0].schema(), other.landId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ownerId)) {
        this.ownerId = data().deepCopy(fields()[1].schema(), other.ownerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.approverId)) {
        this.approverId = data().deepCopy(fields()[2].schema(), other.approverId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.approvedAt)) {
        this.approvedAt = data().deepCopy(fields()[3].schema(), other.approvedAt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.proposedAt)) {
        this.proposedAt = data().deepCopy(fields()[4].schema(), other.proposedAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.harvestSuitabilities)) {
        this.harvestSuitabilities = data().deepCopy(fields()[5].schema(), other.harvestSuitabilities);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.groundHeightValue)) {
        this.groundHeightValue = data().deepCopy(fields()[6].schema(), other.groundHeightValue);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.groundHeightUnit)) {
        this.groundHeightUnit = data().deepCopy(fields()[7].schema(), other.groundHeightUnit);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.soilPh)) {
        this.soilPh = data().deepCopy(fields()[8].schema(), other.soilPh);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.waterAvailabilityStatus)) {
        this.waterAvailabilityStatus = data().deepCopy(fields()[9].schema(), other.waterAvailabilityStatus);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.landUsageHistory)) {
        this.landUsageHistory = data().deepCopy(fields()[10].schema(), other.landUsageHistory);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.landStatus)) {
        this.landStatus = data().deepCopy(fields()[11].schema(), other.landStatus);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.areaValue)) {
        this.areaValue = data().deepCopy(fields()[12].schema(), other.areaValue);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.areaUnit)) {
        this.areaUnit = data().deepCopy(fields()[13].schema(), other.areaUnit);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.street)) {
        this.street = data().deepCopy(fields()[14].schema(), other.street);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.city)) {
        this.city = data().deepCopy(fields()[15].schema(), other.city);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[16].schema(), other.postalCode);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.certificateUrl)) {
        this.certificateUrl = data().deepCopy(fields()[17].schema(), other.certificateUrl);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.photos)) {
        this.photos = data().deepCopy(fields()[18].schema(), other.photos);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing LandRegisteredAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.temantani.kafka.land.avro.model.LandRegisteredAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.landId)) {
        this.landId = data().deepCopy(fields()[0].schema(), other.landId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ownerId)) {
        this.ownerId = data().deepCopy(fields()[1].schema(), other.ownerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.approverId)) {
        this.approverId = data().deepCopy(fields()[2].schema(), other.approverId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.approvedAt)) {
        this.approvedAt = data().deepCopy(fields()[3].schema(), other.approvedAt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.proposedAt)) {
        this.proposedAt = data().deepCopy(fields()[4].schema(), other.proposedAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.harvestSuitabilities)) {
        this.harvestSuitabilities = data().deepCopy(fields()[5].schema(), other.harvestSuitabilities);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.groundHeightValue)) {
        this.groundHeightValue = data().deepCopy(fields()[6].schema(), other.groundHeightValue);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.groundHeightUnit)) {
        this.groundHeightUnit = data().deepCopy(fields()[7].schema(), other.groundHeightUnit);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.soilPh)) {
        this.soilPh = data().deepCopy(fields()[8].schema(), other.soilPh);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.waterAvailabilityStatus)) {
        this.waterAvailabilityStatus = data().deepCopy(fields()[9].schema(), other.waterAvailabilityStatus);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.landUsageHistory)) {
        this.landUsageHistory = data().deepCopy(fields()[10].schema(), other.landUsageHistory);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.landStatus)) {
        this.landStatus = data().deepCopy(fields()[11].schema(), other.landStatus);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.areaValue)) {
        this.areaValue = data().deepCopy(fields()[12].schema(), other.areaValue);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.areaUnit)) {
        this.areaUnit = data().deepCopy(fields()[13].schema(), other.areaUnit);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.street)) {
        this.street = data().deepCopy(fields()[14].schema(), other.street);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.city)) {
        this.city = data().deepCopy(fields()[15].schema(), other.city);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[16].schema(), other.postalCode);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.certificateUrl)) {
        this.certificateUrl = data().deepCopy(fields()[17].schema(), other.certificateUrl);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.photos)) {
        this.photos = data().deepCopy(fields()[18].schema(), other.photos);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'landId' field.
      * @return The value.
      */
    public java.lang.String getLandId() {
      return landId;
    }


    /**
      * Sets the value of the 'landId' field.
      * @param value The value of 'landId'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setLandId(java.lang.String value) {
      validate(fields()[0], value);
      this.landId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'landId' field has been set.
      * @return True if the 'landId' field has been set, false otherwise.
      */
    public boolean hasLandId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'landId' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearLandId() {
      landId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ownerId' field.
      * @return The value.
      */
    public java.lang.String getOwnerId() {
      return ownerId;
    }


    /**
      * Sets the value of the 'ownerId' field.
      * @param value The value of 'ownerId'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setOwnerId(java.lang.String value) {
      validate(fields()[1], value);
      this.ownerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ownerId' field has been set.
      * @return True if the 'ownerId' field has been set, false otherwise.
      */
    public boolean hasOwnerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ownerId' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearOwnerId() {
      ownerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'approverId' field.
      * @return The value.
      */
    public java.lang.String getApproverId() {
      return approverId;
    }


    /**
      * Sets the value of the 'approverId' field.
      * @param value The value of 'approverId'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setApproverId(java.lang.String value) {
      validate(fields()[2], value);
      this.approverId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'approverId' field has been set.
      * @return True if the 'approverId' field has been set, false otherwise.
      */
    public boolean hasApproverId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'approverId' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearApproverId() {
      approverId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'approvedAt' field.
      * @return The value.
      */
    public java.time.Instant getApprovedAt() {
      return approvedAt;
    }


    /**
      * Sets the value of the 'approvedAt' field.
      * @param value The value of 'approvedAt'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setApprovedAt(java.time.Instant value) {
      validate(fields()[3], value);
      this.approvedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'approvedAt' field has been set.
      * @return True if the 'approvedAt' field has been set, false otherwise.
      */
    public boolean hasApprovedAt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'approvedAt' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearApprovedAt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'proposedAt' field.
      * @return The value.
      */
    public java.time.Instant getProposedAt() {
      return proposedAt;
    }


    /**
      * Sets the value of the 'proposedAt' field.
      * @param value The value of 'proposedAt'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setProposedAt(java.time.Instant value) {
      validate(fields()[4], value);
      this.proposedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'proposedAt' field has been set.
      * @return True if the 'proposedAt' field has been set, false otherwise.
      */
    public boolean hasProposedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'proposedAt' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearProposedAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'harvestSuitabilities' field.
      * @return The value.
      */
    public java.lang.String getHarvestSuitabilities() {
      return harvestSuitabilities;
    }


    /**
      * Sets the value of the 'harvestSuitabilities' field.
      * @param value The value of 'harvestSuitabilities'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setHarvestSuitabilities(java.lang.String value) {
      validate(fields()[5], value);
      this.harvestSuitabilities = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'harvestSuitabilities' field has been set.
      * @return True if the 'harvestSuitabilities' field has been set, false otherwise.
      */
    public boolean hasHarvestSuitabilities() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'harvestSuitabilities' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearHarvestSuitabilities() {
      harvestSuitabilities = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'groundHeightValue' field.
      * @return The value.
      */
    public java.math.BigDecimal getGroundHeightValue() {
      return groundHeightValue;
    }


    /**
      * Sets the value of the 'groundHeightValue' field.
      * @param value The value of 'groundHeightValue'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setGroundHeightValue(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.groundHeightValue = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'groundHeightValue' field has been set.
      * @return True if the 'groundHeightValue' field has been set, false otherwise.
      */
    public boolean hasGroundHeightValue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'groundHeightValue' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearGroundHeightValue() {
      groundHeightValue = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'groundHeightUnit' field.
      * @return The value.
      */
    public java.lang.String getGroundHeightUnit() {
      return groundHeightUnit;
    }


    /**
      * Sets the value of the 'groundHeightUnit' field.
      * @param value The value of 'groundHeightUnit'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setGroundHeightUnit(java.lang.String value) {
      validate(fields()[7], value);
      this.groundHeightUnit = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'groundHeightUnit' field has been set.
      * @return True if the 'groundHeightUnit' field has been set, false otherwise.
      */
    public boolean hasGroundHeightUnit() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'groundHeightUnit' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearGroundHeightUnit() {
      groundHeightUnit = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'soilPh' field.
      * @return The value.
      */
    public java.math.BigDecimal getSoilPh() {
      return soilPh;
    }


    /**
      * Sets the value of the 'soilPh' field.
      * @param value The value of 'soilPh'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setSoilPh(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.soilPh = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'soilPh' field has been set.
      * @return True if the 'soilPh' field has been set, false otherwise.
      */
    public boolean hasSoilPh() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'soilPh' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearSoilPh() {
      soilPh = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'waterAvailabilityStatus' field.
      * @return The value.
      */
    public java.lang.String getWaterAvailabilityStatus() {
      return waterAvailabilityStatus;
    }


    /**
      * Sets the value of the 'waterAvailabilityStatus' field.
      * @param value The value of 'waterAvailabilityStatus'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setWaterAvailabilityStatus(java.lang.String value) {
      validate(fields()[9], value);
      this.waterAvailabilityStatus = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'waterAvailabilityStatus' field has been set.
      * @return True if the 'waterAvailabilityStatus' field has been set, false otherwise.
      */
    public boolean hasWaterAvailabilityStatus() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'waterAvailabilityStatus' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearWaterAvailabilityStatus() {
      waterAvailabilityStatus = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'landUsageHistory' field.
      * @return The value.
      */
    public java.lang.String getLandUsageHistory() {
      return landUsageHistory;
    }


    /**
      * Sets the value of the 'landUsageHistory' field.
      * @param value The value of 'landUsageHistory'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setLandUsageHistory(java.lang.String value) {
      validate(fields()[10], value);
      this.landUsageHistory = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'landUsageHistory' field has been set.
      * @return True if the 'landUsageHistory' field has been set, false otherwise.
      */
    public boolean hasLandUsageHistory() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'landUsageHistory' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearLandUsageHistory() {
      landUsageHistory = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'landStatus' field.
      * @return The value.
      */
    public java.lang.String getLandStatus() {
      return landStatus;
    }


    /**
      * Sets the value of the 'landStatus' field.
      * @param value The value of 'landStatus'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setLandStatus(java.lang.String value) {
      validate(fields()[11], value);
      this.landStatus = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'landStatus' field has been set.
      * @return True if the 'landStatus' field has been set, false otherwise.
      */
    public boolean hasLandStatus() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'landStatus' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearLandStatus() {
      landStatus = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'areaValue' field.
      * @return The value.
      */
    public java.math.BigDecimal getAreaValue() {
      return areaValue;
    }


    /**
      * Sets the value of the 'areaValue' field.
      * @param value The value of 'areaValue'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setAreaValue(java.math.BigDecimal value) {
      validate(fields()[12], value);
      this.areaValue = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'areaValue' field has been set.
      * @return True if the 'areaValue' field has been set, false otherwise.
      */
    public boolean hasAreaValue() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'areaValue' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearAreaValue() {
      areaValue = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'areaUnit' field.
      * @return The value.
      */
    public java.lang.String getAreaUnit() {
      return areaUnit;
    }


    /**
      * Sets the value of the 'areaUnit' field.
      * @param value The value of 'areaUnit'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setAreaUnit(java.lang.String value) {
      validate(fields()[13], value);
      this.areaUnit = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'areaUnit' field has been set.
      * @return True if the 'areaUnit' field has been set, false otherwise.
      */
    public boolean hasAreaUnit() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'areaUnit' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearAreaUnit() {
      areaUnit = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * @return The value.
      */
    public java.lang.String getStreet() {
      return street;
    }


    /**
      * Sets the value of the 'street' field.
      * @param value The value of 'street'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setStreet(java.lang.String value) {
      validate(fields()[14], value);
      this.street = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'street' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearStreet() {
      street = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setCity(java.lang.String value) {
      validate(fields()[15], value);
      this.city = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearCity() {
      city = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCode' field.
      * @return The value.
      */
    public java.lang.String getPostalCode() {
      return postalCode;
    }


    /**
      * Sets the value of the 'postalCode' field.
      * @param value The value of 'postalCode'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setPostalCode(java.lang.String value) {
      validate(fields()[16], value);
      this.postalCode = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCode' field has been set.
      * @return True if the 'postalCode' field has been set, false otherwise.
      */
    public boolean hasPostalCode() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'postalCode' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearPostalCode() {
      postalCode = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'certificateUrl' field.
      * @return The value.
      */
    public java.lang.String getCertificateUrl() {
      return certificateUrl;
    }


    /**
      * Sets the value of the 'certificateUrl' field.
      * @param value The value of 'certificateUrl'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setCertificateUrl(java.lang.String value) {
      validate(fields()[17], value);
      this.certificateUrl = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'certificateUrl' field has been set.
      * @return True if the 'certificateUrl' field has been set, false otherwise.
      */
    public boolean hasCertificateUrl() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'certificateUrl' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearCertificateUrl() {
      certificateUrl = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'photos' field.
      * @return The value.
      */
    public java.lang.String getPhotos() {
      return photos;
    }


    /**
      * Sets the value of the 'photos' field.
      * @param value The value of 'photos'.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder setPhotos(java.lang.String value) {
      validate(fields()[18], value);
      this.photos = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'photos' field has been set.
      * @return True if the 'photos' field has been set, false otherwise.
      */
    public boolean hasPhotos() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'photos' field.
      * @return This builder.
      */
    public com.temantani.kafka.land.avro.model.LandRegisteredAvroModel.Builder clearPhotos() {
      photos = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LandRegisteredAvroModel build() {
      try {
        LandRegisteredAvroModel record = new LandRegisteredAvroModel();
        record.landId = fieldSetFlags()[0] ? this.landId : (java.lang.String) defaultValue(fields()[0]);
        record.ownerId = fieldSetFlags()[1] ? this.ownerId : (java.lang.String) defaultValue(fields()[1]);
        record.approverId = fieldSetFlags()[2] ? this.approverId : (java.lang.String) defaultValue(fields()[2]);
        record.approvedAt = fieldSetFlags()[3] ? this.approvedAt : (java.time.Instant) defaultValue(fields()[3]);
        record.proposedAt = fieldSetFlags()[4] ? this.proposedAt : (java.time.Instant) defaultValue(fields()[4]);
        record.harvestSuitabilities = fieldSetFlags()[5] ? this.harvestSuitabilities : (java.lang.String) defaultValue(fields()[5]);
        record.groundHeightValue = fieldSetFlags()[6] ? this.groundHeightValue : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.groundHeightUnit = fieldSetFlags()[7] ? this.groundHeightUnit : (java.lang.String) defaultValue(fields()[7]);
        record.soilPh = fieldSetFlags()[8] ? this.soilPh : (java.math.BigDecimal) defaultValue(fields()[8]);
        record.waterAvailabilityStatus = fieldSetFlags()[9] ? this.waterAvailabilityStatus : (java.lang.String) defaultValue(fields()[9]);
        record.landUsageHistory = fieldSetFlags()[10] ? this.landUsageHistory : (java.lang.String) defaultValue(fields()[10]);
        record.landStatus = fieldSetFlags()[11] ? this.landStatus : (java.lang.String) defaultValue(fields()[11]);
        record.areaValue = fieldSetFlags()[12] ? this.areaValue : (java.math.BigDecimal) defaultValue(fields()[12]);
        record.areaUnit = fieldSetFlags()[13] ? this.areaUnit : (java.lang.String) defaultValue(fields()[13]);
        record.street = fieldSetFlags()[14] ? this.street : (java.lang.String) defaultValue(fields()[14]);
        record.city = fieldSetFlags()[15] ? this.city : (java.lang.String) defaultValue(fields()[15]);
        record.postalCode = fieldSetFlags()[16] ? this.postalCode : (java.lang.String) defaultValue(fields()[16]);
        record.certificateUrl = fieldSetFlags()[17] ? this.certificateUrl : (java.lang.String) defaultValue(fields()[17]);
        record.photos = fieldSetFlags()[18] ? this.photos : (java.lang.String) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LandRegisteredAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<LandRegisteredAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LandRegisteredAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<LandRegisteredAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










